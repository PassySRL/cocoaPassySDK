// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-macos13.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PassyCoreUtils
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreLocation
import Foundation
import PassyCore
@_exported import PassyCoreUtils
import Swift
import _Concurrency
import _StringProcessing
public protocol SmartkeyDeviceBLEScannerDelegate {
  var devices: [PassyCore.SmartkeyBluetoothDevice] { get }
  func didDeviceDiscovered(smartkeyDevice: PassyCore.SmartkeyBluetoothDevice, timestamp: Foundation.Date)
  func didDeviceDiscovered(forDevices devices: [PassyCore.SmartkeyBluetoothDevice], timestamp: Foundation.Date)
  func locationNotAvailableForAuthStatus(status: CoreLocation.CLAuthorizationStatus)
}
@objc public class SmartkeyDeviceBLEScanner : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate, CoreBluetooth.CBCentralManagerDelegate {
  public var delegate: (any PassyCoreUtils.SmartkeyDeviceBLEScannerDelegate)?
  public var scanning: Swift.Bool {
    get
  }
  public var regionMonitoringEnabled: Swift.Bool {
    get
  }
  public var centralManager: CoreBluetooth.CBCentralManager? {
    get
  }
  public init(withDelegate delegate: (any PassyCoreUtils.SmartkeyDeviceBLEScannerDelegate)? = nil)
  public func initializeComponents()
  public static func newInstace(delegate: (any PassyCoreUtils.SmartkeyDeviceBLEScannerDelegate)?) -> PassyCoreUtils.SmartkeyDeviceBLEScanner
  public func startScan() -> Swift.Bool
  public func stopScan() -> Swift.Bool
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didRange beacons: [CoreLocation.CLBeacon], satisfying beaconConstraint: CoreLocation.CLBeaconIdentityConstraint)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didDetermineState state: CoreLocation.CLRegionState, for region: CoreLocation.CLRegion)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc deinit
}
